{"version":3,"sources":["ducks/todoDuck.ts","lib/createReducer.ts","lib/ducks.ts","lib/keyedSubStates.ts","ducks/rootDuck.ts","components/TodoList.tsx","components/TodoListCreator.tsx","App.tsx","index.tsx"],"names":["emptyTodoState","list","title","todoDuck","prefix","getBranch","actionType","initialState","reducer","state","action","type","Object","assign","payload","update","addTodo","description","dispatch","getState","todo","id","String","length","complete","toggleComplete","map","t","remove","filter","setTitle","getCompleted","createSelector","console","log","combineDucks","duckCreators","obj","reducers","extras","keys","forEach","key","combineReducers","root","thing","nested","keyedSubState","foo","bar","duckCreator","subStateDuck","s","cache","startsWith","replace","split","childAction","subState","get","duckInCache","duck","hydratedState","undefined","ConnectedTodoList","connect","rootState","ownProps","todoListState","numComplete","bindActionCreators","props","useState","setDescription","className","onSubmit","e","preventDefault","value","placeholder","onChange","currentTarget","checked","onClick","TodoListCreator","createList","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.331422a5.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\nimport { createSelector } from 'reselect';\n\nimport { createReducer } from 'lib/createReducer';\n\nexport type Todo = { id: string; description: string; complete: boolean }\nexport type TodoState = { list: Todo[]; title: string }\n\nexport const emptyTodoState: TodoState = { list: [], title: '' };\n\nexport const todoDuck = (prefix: string, getBranch: <S>(rootState: S) => TodoState) => {\n  const { update, reducer } = createReducer(prefix + '/UPDATE', emptyTodoState);\n\n  return {\n    reducer,\n    getBranch,\n\n    addTodo: <S>(description: string): ThunkAction<void, S, {}, AnyAction> => (dispatch, getState) => {\n      const state = getBranch(getState());\n      const todo: Todo = {\n        description,\n        id: String(state.list.length + 1),\n        complete: false,\n      };\n      const list = [ ...getBranch(getState()).list, todo ];\n      dispatch(update({ list }));\n    },\n\n    toggleComplete: <S>(todo: Todo): ThunkAction<void, S, {}, AnyAction> => (dispatch, getState) => {\n      const state = getBranch(getState());\n      const list = state.list.map(t => (t.id === todo.id) ? { ...todo, complete: !todo.complete } : t);\n      dispatch(update({ list }));\n    },\n\n    remove: <S>(todo: Todo): ThunkAction<void, S, {}, AnyAction> => (dispatch, getState) => {\n      const state = getBranch(getState());\n      const list = state.list.filter(t => t.id !== todo.id);\n      dispatch(update({ list }));\n    },\n\n    setTitle: (title: string) => update({ title }),\n\n    getCompleted: createSelector(\n      <S>(state: S) => getBranch(state).list,\n      list => {\n        console.log('getCompleted selector recalculated', prefix);\n        return list.filter(t => t.complete);\n      },\n    ),\n  };\n};\n\nexport type TodoDuck = ReturnType<typeof todoDuck>;\n","import { Reducer } from 'redux';\n\ninterface UpdateAction<S> {\n  type: string;\n  payload: Partial<S>;\n}\n\ninterface Updater<S, A> {\n  (payload: Partial<S>): A;\n}\n\ninterface ReducerConfig<S> {\n  reducer: Reducer<S>;\n  update: Updater<S, UpdateAction<S>>;\n}\n\n/**\n * Creates a simple reducer and a generic `update` action creator. The update action works a bit\n * like a React Component's setState method in that it will perform a shallow merge with the\n * existing state.\n *\n * @example\n * interface UserState { isLoggedIn: boolean; }\n * const initialState = { isLoggedIn: false };\n * const { reducer, update } = createReducer<UserState>('user/UPDATE', initialState);\n * const login = () => update({ isLoggedIn: true });\n *\n * class SomeConnectedComponent extends React.Component {\n *   onLoginClick = () => {\n *     this.props.dispatch(login());\n *   };\n * }\n */\nexport const createReducer = <S>(actionType: string, initialState: S): ReducerConfig<S> => {\n\n  const reducer: Reducer<S> = (state = initialState, action) => {\n    if (action.type === actionType) {\n      return Object.assign({}, state, action.payload);\n    }\n    return state;\n  };\n\n  const update: Updater<S, UpdateAction<S>> = payload => ({ type: actionType, payload });\n\n  return { reducer, update };\n}\n","import { Reducer, combineReducers, ReducersMapObject } from 'redux';\n\nexport type GetBranch<T> = (rootState: any) => T;\n\nexport interface Duck<T> {\n  reducer: Reducer<T>;\n}\n\nexport interface DuckCreator<T> {\n  (actionTypePrefix: string, getBranch: GetBranch<T>): Duck<T>;\n}\n\nexport type ExtractState<TDuck> = TDuck extends Duck<infer S> ? S : never;\n\nconst keys = <T>(obj: T) => Object.keys(obj) as Array<keyof T>;\n\nexport const combineDucks = <M extends { [key: string]: DuckCreator<any> }>(duckCreators: M) => {\n  return (prefix: string, getBranch: GetBranch<{ [K in keyof M]: ExtractState<ReturnType<M[K]>>}>) => {\n    const reducers = {} as ReducersMapObject<{ [K in keyof M]: ExtractState<ReturnType<M[K]>>}>;\n    const extras = {} as { [K in keyof M]: ReturnType<M[K]> };\n    keys(duckCreators).forEach(key => {\n      extras[key] = duckCreators[key](prefix + '.' + key, state => getBranch(state)[key]) as ReturnType<M[keyof M]>;\n      reducers[key] = extras[key].reducer;\n    });\n    const reducer = combineReducers(reducers);\n    return { reducer, ...extras };\n  };\n};\n","import { DuckCreator, combineDucks, ExtractState } from 'lib/ducks';\nimport { Reducer } from 'redux';\n\ninterface Dictionary<T> {\n  [key: string]: T;\n}\n\nexport const keyedSubStates = <M extends { [key: string]: DuckCreator<any> }>(map: M) => {\n  return  (prefix: string, getBranch: (rootState: any) => Dictionary<ExtractState<M>>) => {\n    const duckCreator = combineDucks(map);\n    const subStateDuck = duckCreator('', s => s);\n\n    const reducer: Reducer<Dictionary<{ [K in keyof M]: ReturnType<M[K]> }>> = (state = {}, action) => {\n      if (action.type.startsWith(prefix)) {\n        const [ , key, childAction ] = action.type.replace(prefix, '').split(/\\./);\n        const subState = subStateDuck.reducer(state[key] as any, { ...action, type: '.' + childAction });\n        return { ...state, [key]: subState }\n      }\n      return state;\n    };\n\n    const cache: { [key: string]: { [K in keyof M]: ReturnType<M[K]> } } = {} as any;\n\n    const get = (key: string) => {\n      const duckInCache = cache[key];\n      if (duckInCache) {\n        return duckInCache;\n      }\n      const duck = duckCreator(prefix + '.' + key, state => {\n        const hydratedState = getBranch(state)[key];\n        if (!hydratedState) {\n          const emptyState = duck.reducer(undefined, { type: '' });\n          return emptyState;\n        }\n        return hydratedState as { [K in keyof M]: ExtractState<ReturnType<M[K]>>; };\n      });\n      cache[key] = duck;\n      return duck;\n    };\n\n    return { reducer, get };\n  };\n};","import { todoDuck } from 'ducks/todoDuck';\nimport { combineDucks, ExtractState } from 'lib/ducks';\nimport { keyedSubStates } from 'lib/keyedSubStates';\n\nexport const root = combineDucks({\n  thing: todoDuck,\n  nested: combineDucks({\n    thing: todoDuck,\n  }),\n  keyedSubState: keyedSubStates({\n    foo: todoDuck,\n    bar: todoDuck,\n  }),\n})('', s => s);\n\nexport type RootState = ExtractState<typeof root>;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { AnyAction, bindActionCreators } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\n\nimport { Todo, TodoDuck } from 'ducks/todoDuck';\n\nexport interface TodoListProps {\n  title: string;\n  list: Todo[];\n  numComplete: number;\n  addTodo: (description: string) => void;\n  toggleComplete: (todo: Todo) => void;\n  remove: (todo: Todo) => void;\n}\n\nexport const TodoList: React.FC<TodoListProps> = props => {\n  const [ description, setDescription ] = useState('');\n\n  const onSubmit: React.FormEventHandler = e => {\n    e.preventDefault();\n    props.addTodo(description);\n    setDescription('');\n  };\n\n  return (\n    <div className=\"todo-list\">\n      <h2>{props.title || 'Todo List'}</h2>\n      <form onSubmit={onSubmit}>\n        <label>What needs to be done?</label>\n        <div className=\"flex\">\n          <div className=\"flex-grow\">\n            <input\n              value={description}\n              className=\"w-100\"\n              placeholder=\"e.g. Buy milk\"\n              onChange={e => setDescription(e.currentTarget.value)}\n            />\n          </div>\n          <div className=\"pl-2\">\n            <button>Add</button>\n          </div>\n        </div>\n      </form>\n      <div>{props.numComplete} completed</div>\n      <table className=\"todo-list__table\">\n        <thead>\n          <tr>\n            <th>Complete?</th>\n            <th className=\"todo-list__th--description\">Description</th>\n            <th>Remove?</th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.list.map(todo => (\n            <tr key={todo.id}>\n              <td>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.complete}\n                  onChange={() => props.toggleComplete(todo)}\n                />\n              </td>\n              <td className={(todo.complete) ? 'line-through' : ''}>{todo.description}</td>\n              <td><button type=\"button\" onClick={() => props.remove(todo)}>x</button></td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\ninterface OwnProps { todoDuck: TodoDuck }\n\nconst mapStateToProps = (rootState: any, ownProps: OwnProps) => {\n  const todoListState = ownProps.todoDuck.getBranch(rootState);\n  return {\n    title: todoListState.title,\n    list: todoListState.list,\n    numComplete: ownProps.todoDuck.getCompleted(rootState).length,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, {}, AnyAction>, ownProps: OwnProps) => bindActionCreators({\n  addTodo: ownProps.todoDuck.addTodo,\n  toggleComplete: ownProps.todoDuck.toggleComplete,\n  remove: ownProps.todoDuck.remove,\n}, dispatch);\n\nexport const ConnectedTodoList = connect(mapStateToProps, mapDispatchToProps)(TodoList);\n","import React, { useState } from 'react';\n\ninterface TodoListCreatorProps {\n  createList: (title: string) => void;\n}\nexport const TodoListCreator: React.FC<TodoListCreatorProps> = props => {\n  const [ title, setTitle ] = useState('');\n\n  const onSubmit: React.FormEventHandler = e => {\n    e.preventDefault();\n    props.createList(title);\n    setTitle('');\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <h2>Create New List</h2>\n      <label>\n        What would you like to call your list?\n        <input value={title} onChange={e => setTitle(e.currentTarget.value)} />\n      </label>\n      <button>Create</button>\n    </form>\n  );\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { AnyAction } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\n\nimport { root, RootState } from 'ducks/rootDuck';\nimport { ConnectedTodoList } from 'components/TodoList';\nimport { TodoListCreator } from 'components/TodoListCreator';\n\ntype AppProps = Pick<RootState, 'keyedSubState'> & { dispatch: ThunkDispatch<RootState, {}, AnyAction> };\n\nconst App: React.FC<AppProps> = props => {\n\n  const createList = (title: string) => {\n    props.dispatch(root.keyedSubState.get(title).foo.setTitle(title));\n  };\n\n  return (\n    <div className=\"container\">\n      <ConnectedTodoList todoDuck={root.thing} />\n      <ConnectedTodoList todoDuck={root.nested.thing} />\n      {Object.keys(props.keyedSubState).map(key => (\n        <ConnectedTodoList key={key} todoDuck={root.keyedSubState.get(key).foo} />\n      ))}\n      <TodoListCreator createList={createList} />\n    </div>\n  );\n};\n\nexport default connect((state: RootState) => ({ keyedSubState: state.keyedSubState }))(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport App from 'App';\nimport { root } from 'ducks/rootDuck';\n\nimport 'index.css';\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(root.reducer, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}